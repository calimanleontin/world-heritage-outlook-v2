From 8d5dd3334e611a77f11e7fc7e2e04990ad6116e7 Mon Sep 17 00:00:00 2001
From: Alex Pott
Date: Wed, 18 Oct 2017 11:05:17 +0100
Subject: Issue #2573807 by 20th, Sam152, msgph, sherakama, heikki, jcnventura,
 Wim Leers: Fatal error: Call to a member function getTimestamp()

(cherry picked from commit 505f3bf8d4dfa7addfb2180882e35af5f6db6c74)
---
 core/modules/page_cache/src/StackMiddleware/PageCache.php   |  9 +++++++--
 core/modules/page_cache/src/Tests/PageCacheTest.php         | 13 +++++++++++++
 .../system_test/src/Controller/SystemTestController.php     |  7 +++++++
 .../tests/modules/system_test/system_test.routing.yml       |  8 ++++++++
 4 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/core/modules/page_cache/src/StackMiddleware/PageCache.php b/core/modules/page_cache/src/StackMiddleware/PageCache.php
index 51c2ae4..82456b1 100644
--- a/core/modules/page_cache/src/StackMiddleware/PageCache.php
+++ b/core/modules/page_cache/src/StackMiddleware/PageCache.php
@@ -260,10 +260,15 @@ class PageCache implements HttpKernelInterface {
         $expire = $request_time + $cache_ttl_4xx;
       }
     }
-    else {
-      $date = $response->getExpires()->getTimestamp();
+    // The getExpires method could return NULL if Expires header is not set, so
+    // the returned value needs to be checked before calling getTimestamp.
+    elseif ($expires = $response->getExpires()) {
+      $date = $expires->getTimestamp();
       $expire = ($date > $request_time) ? $date : Cache::PERMANENT;
     }
+    else {
+      $expire = Cache::PERMANENT;
+    }
 
     if ($expire === Cache::PERMANENT || $expire > $request_time) {
       $tags = $response->getCacheableMetadata()->getCacheTags();
diff --git a/core/modules/page_cache/src/Tests/PageCacheTest.php b/core/modules/page_cache/src/Tests/PageCacheTest.php
index cb00cb6..179bba1 100644
--- a/core/modules/page_cache/src/Tests/PageCacheTest.php
+++ b/core/modules/page_cache/src/Tests/PageCacheTest.php
@@ -539,6 +539,19 @@ class PageCacheTest extends WebTestBase {
   }
 
   /**
+   * Test a cacheable response with custom cache control.
+   */
+  public function testCacheableWithCustomCacheControl() {
+    $config = $this->config('system.performance');
+    $config->set('cache.page.max_age', 300);
+    $config->save();
+
+    $this->drupalGet('/system-test/custom-cache-control');
+    $this->assertResponse(200);
+    $this->assertHeader('Cache-Control', 'bar, private');
+  }
+
+  /**
    * Test that URLs are cached in a not normalized form.
    */
   public function testNoUrlNormalization() {
diff --git a/core/modules/system/tests/modules/system_test/src/Controller/SystemTestController.php b/core/modules/system/tests/modules/system_test/src/Controller/SystemTestController.php
index 5e49c24..37eb875 100644
--- a/core/modules/system/tests/modules/system_test/src/Controller/SystemTestController.php
+++ b/core/modules/system/tests/modules/system_test/src/Controller/SystemTestController.php
@@ -375,4 +375,11 @@ class SystemTestController extends ControllerBase {
     return $response;
   }
 
+  /**
+   * Returns a cacheable response with a custom cache control.
+   */
+  public function getCacheableResponseWithCustomCacheControl() {
+    return new CacheableResponse('Foo', 200, ['Cache-Control' => 'bar']);
+  }
+
 }
diff --git a/core/modules/system/tests/modules/system_test/system_test.routing.yml b/core/modules/system/tests/modules/system_test/system_test.routing.yml
index 579b511..b7cba07 100644
--- a/core/modules/system/tests/modules/system_test/system_test.routing.yml
+++ b/core/modules/system/tests/modules/system_test/system_test.routing.yml
@@ -196,3 +196,11 @@ system_test.echo_utf8:
     _controller: '\Drupal\system_test\Controller\SystemTestController::simpleEcho'
   requirements:
     _access: 'TRUE'
+
+system_test.custom_cache_control:
+  path: '/system-test/custom-cache-control'
+  defaults:
+    _title: 'Cacheable response with custom cache control'
+    _controller: '\Drupal\system_test\Controller\SystemTestController::getCacheableResponseWithCustomCacheControl'
+  requirements:
+    _access: 'TRUE'
-- 
cgit v1.1

