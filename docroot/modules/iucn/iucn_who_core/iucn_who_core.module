<?php

use \Drupal\iucn_who_core\ToolbarHandler;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\views\Views;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;

define('TAXONOMY_SITE_CONSERVATION_RATING', 'conservation_rating');

/**
 * Implements hook_toolbar().
 */
function iucn_who_core_toolbar() {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ToolbarHandler::class)
    ->toolbar();
}

/**
 * Implements hook_page_attachments_alter().
 */
function iucn_who_core_page_attachments_alter(array &$attachments) {
  // Trim metatag desc.
  if (!empty($attachments['#attached']['html_head'])) {
    foreach ($attachments['#attached']['html_head'] as &$tag) {
      $is_meta = !empty($tag[0]['#tag']) && $tag[0]['#tag'] == 'meta';
      $is_desc = $is_meta && !empty($tag[0]['#attributes']['name']) && $tag[0]['#attributes']['name'] == 'description';
      if ($is_desc) {
        $summary = text_summary($tag[0]['#attributes']['content'], 'plain_text', 300);
        $tag[0]['#attributes']['content'] = preg_replace('/\n|\r|\t/m', ' ', $summary);
      }
    }
  }
  _remove_header_links($attachments);
}

/**
 * Implements hook_entity_view_alter().
 */
function iucn_who_core_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Cheking view_mode for node.
  if ($build['#view_mode'] !== 'full' && $entity Instanceof NodeInterface) {
    return;
  }
  _remove_header_links($build);
}

function _remove_header_links(array &$attachments) {
  // Cheking html_head_link on attached tags in head.
  if (!isset($attachments['#attached']['html_head_link'])) {
    return;
  }
  // Array to unset.
  $unset_html_head_link = [
    'delete-form',
    'edit-form',
    'version-history',
    'revision',
    'display',
    'drupal:content-translation-overview',
    'drupal:content-translation-add',
    'drupal:content-translation-edit',
    'drupal:content-translation-delete',
    'shortlink',
  ];
  // Unset loop.
  foreach ($attachments['#attached']['html_head_link'] as $key => $value) {
    if (isset($value[0]['rel']) && in_array($value[0]['rel'], $unset_html_head_link)) {
      unset($attachments['#attached']['html_head_link'][$key]);
    }
  }
}

/**
 * Implements hook_path_insert().
 */
function iucn_who_core_path_insert($path) {
  _iucn_who_multilingual_path($path);
}

/**
 * Implements hook_path_update().
 */
function iucn_who_core_path_update($path) {
  _iucn_who_multilingual_path($path);
}

function _iucn_who_multilingual_path($path) {
  if (preg_match('/^\/node\/[0-9]*$/', $path['source'])) {
    if ($path['langcode'] == 'en') {
      foreach (\Drupal::languageManager()->getLanguages() as $language) {
        if ($language->getId() == 'en') {
          continue;
        }
        $conditions = [
          'source' => $path['source'],
          'langcode' => $language->getId(),
        ];
        $existing_alias = \Drupal::service('path.alias_storage')->load($conditions);
        if (empty($existing_alias)) {
          // Not translated.
          $path = \Drupal::service('path.alias_storage')->save($path['source'], $path['alias'], $language->getId());
        }
        else if (!empty($path['original']['alias']) && $path['original']['alias'] == $existing_alias['alias']) {
          // Update alias.
          $existing_alias['alias'] = $path['alias'];
          $path = \Drupal::service('path.alias_storage')->save($path['source'], $path['alias'], $language->getId(), $existing_alias['pid']);
        }
      }
    }
  }
}


function iucn_who_core_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
  $parameters = $route_match->getParameters()->all();

  // Custom breadcrumb for Webforms.
  if (isset($parameters['webform']) && in_array($parameters['webform']->id(), ['site_feedback', 'ask_a_question'])) {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('Home'), '<front>'));
        $new_breadcrumb->addLink(Link::createFromRoute(t('About'), '<none>'));
        $nid = 1234;
        $url_object = Url::fromRoute('entity.node.canonical', ['node' => $nid], ['absolute' => FALSE]);
        $url_node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
        $new_breadcrumb->addLink(Link::fromTextAndUrl($url_node->getTitle(), $url_object));

      }
    }
    $breadcrumb = $new_breadcrumb;

  }

  // Custom breadcrumb for benefits_list view.
  if (isset($parameters['view_id']) && $parameters['view_id'] == 'benefits_list' && isset($parameters['display_id']) && $parameters['display_id'] == 'page_1') {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      $new_breadcrumb->addLink($val);
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('Resources'), '<none>'));
      }
    }
    $breadcrumb = $new_breadcrumb;
  }

  // Custom breadcrumb for publication ctype.
  if (!empty($parameters['node']) && ($parameters['node'] instanceof NodeInterface) && $parameters['node']->getType() == 'publication') {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      $new_breadcrumb->addLink($val);
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('Resources'), '<none>'));
      }
    }
    $breadcrumb = $new_breadcrumb;
  }

  // Custom breadcrumb for benefit ctype.
  if (!empty($parameters['node']) && ($parameters['node'] instanceof NodeInterface) && $parameters['node']->getType() == 'benefit') {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      $new_breadcrumb->addLink($val);
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('Resources'), '<none>'));
      }

    }
    $breadcrumb = $new_breadcrumb;
  }


  $menu_items = iucn_who_get_all_menu('main');

  // Remove duplicate labels from breadcrumb.
  $new_breadcrumb = new Breadcrumb();
  $text = NULL;
  foreach ($breadcrumb->getLinks() as $key => $val) {

    $currentLanguage = '';
    $default_language = \Drupal::languageManager()->getDefaultLanguage()->getId();
    $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    if ($default_language != $current_language) {
      $currentLanguage = "/$current_language";
    }

    $url = $currentLanguage . $val->getUrl()->toString();

    if (array_key_exists($url, $menu_items)) {
      /** @val \Drupal\Core\Link $val */
      $val->setText($menu_items[$url]);
    }
    if ($text != $val->getText()) {
      $new_breadcrumb->addLink($val);
    }
    $text = $val->getText();
    /** @val \Drupal\Core\Link $val */
  }
  $breadcrumb = $new_breadcrumb;


}

function iucn_who_get_all_menu($menu_name){
  $menu = iucn_who_get_menu($menu_name);
  $menu_items = [];
  foreach ($menu['#items'] as $item) {
    if ($item['url']->toString()) {
      $menu_items[$item['url']->toString()] = $item['title'];
    }
  }
  $menu = iucn_who_get_menu($menu_name, 2);
  foreach ($menu['#items'] as $item) {
    if ($item['url']->toString()) {
      $menu_items[$item['url']->toString()] = $item['title'];
    }
  }
  return $menu_items;
}

function iucn_who_get_menu($menu_name,$depth = 1) {

  $menu_tree = \Drupal::menuTree();
  // Build the typical default set of menu tree parameters.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  // Load the tree based on this set of parameters.
  $parameters->setMinDepth($depth);
  $tree = $menu_tree->load($menu_name, $parameters);
  // Transform the tree using the manipulators you want.
  $manipulators = array(
    // Only show links that are accessible for the current user.
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    // Use the default sorting of menu links.
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);
  // Finally, build a renderable array from the transformed tree.
  $menu = $menu_tree->build($tree);

  return $menu;
}

function mymodule_get_menu_items($menu_name) {

  $menu_data = mymodule_get_menu($menu_name);

  foreach ($menu_data['#items'] as $item) {
    if ($item['url']->getRouteName() == '') {
      $menu[] = [$item['title'] => $item['url']->getRouteName()];
    }
    else {
      $menu[] = [$item['title'] => $item['url']->getInternalPath()];
    }
  }

  return $menu;
}