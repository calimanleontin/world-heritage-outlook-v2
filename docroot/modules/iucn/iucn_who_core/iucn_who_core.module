<?php

use \Drupal\iucn_who_core\ToolbarHandler;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\views\Views;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;

define('TAXONOMY_SITE_CONSERVATION_RATING', 'conservation_rating');

/**
 * Implements hook_toolbar().
 */
function iucn_who_core_toolbar() {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ToolbarHandler::class)
    ->toolbar();
}

/**
 * Implements hook_page_attachments_alter().
 */
function iucn_who_core_page_attachments_alter(array &$attachments) {
  // Trim metatag desc.
  if (!empty($attachments['#attached']['html_head'])) {
    foreach ($attachments['#attached']['html_head'] as &$tag) {
      $is_meta = !empty($tag[0]['#tag']) && $tag[0]['#tag'] == 'meta';
      $is_desc = $is_meta && !empty($tag[0]['#attributes']['name']) && $tag[0]['#attributes']['name'] == 'description';
      if ($is_desc) {
        $summary = text_summary($tag[0]['#attributes']['content'], 'plain_text', 300);
        $tag[0]['#attributes']['content'] = preg_replace('/\n|\r|\t/m', ' ', $summary);
      }
    }
  }
  _remove_header_links($attachments);
}

/**
 * Implements hook_entity_view_alter().
 */
function iucn_who_core_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Cheking view_mode for node.
  if ($build['#view_mode'] !== 'full' && $entity Instanceof NodeInterface) {
    return;
  }
  _remove_header_links($build);
}

function _remove_header_links(array &$attachments) {
  // Cheking html_head_link on attached tags in head.
  if (!isset($attachments['#attached']['html_head_link'])) {
    return;
  }
  // Array to unset.
  $unset_html_head_link = [
    'delete-form',
    'edit-form',
    'version-history',
    'revision',
    'display',
    'drupal:content-translation-overview',
    'drupal:content-translation-add',
    'drupal:content-translation-edit',
    'drupal:content-translation-delete',
    'shortlink',
  ];
  // Unset loop.
  foreach ($attachments['#attached']['html_head_link'] as $key => $value) {
    if (isset($value[0]['rel']) && in_array($value[0]['rel'], $unset_html_head_link)) {
      unset($attachments['#attached']['html_head_link'][$key]);
    }
  }
}


function iucn_who_core_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
  $parameters = $route_match->getParameters()->all();

  // Custom breadcrumb for Webforms.
  if (isset($parameters['webform']) && in_array($parameters['webform']->id(), ['site_feedback', 'ask_a_question'])) {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('About'), '<none>'));
        $nid = 1234;
        $url_object = Url::fromRoute('entity.node.canonical', ['node' => $nid], ['absolute' => FALSE]);
        $url_node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
        $new_breadcrumb->addLink(Link::fromTextAndUrl($url_node->getTitle(), $url_object));

      }
    }
    $breadcrumb = $new_breadcrumb;

  }

  // Custom breadcrumb for benefits_list view.
  if (isset($parameters['view_id']) && $parameters['view_id'] == 'benefits_list' && isset($parameters['display_id']) && $parameters['display_id'] == 'page_1') {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      $new_breadcrumb->addLink($val);
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('Resources'), '<none>'));
      }
    }
    $breadcrumb = $new_breadcrumb;
  }

  // Custom breadcrumb for publication ctype.
  if (!empty($parameters['node']) && ($parameters['node'] instanceof NodeInterface) && $parameters['node']->getType() == 'publication') {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      $new_breadcrumb->addLink($val);
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('Resources'), '<none>'));
      }
    }
    $breadcrumb = $new_breadcrumb;
  }

  // Custom breadcrumb for benefit ctype.
  if (!empty($parameters['node']) && ($parameters['node'] instanceof NodeInterface) && $parameters['node']->getType() == 'benefit') {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      $new_breadcrumb->addLink($val);
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('Resources'), '<none>'));
      }

    }
    $breadcrumb = $new_breadcrumb;
  }

  // Remove duplicate labels from breadcrumb.
  $new_breadcrumb = new Breadcrumb();
  $text = NULL;
  foreach ($breadcrumb->getLinks() as $key => $val) {
    if ($text != $val->getText()) {
      $new_breadcrumb->addLink($val);
    }
    $text = $val->getText();
  }
  $breadcrumb = $new_breadcrumb;
}

use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
function xd() {
  $node = Node::load(994);
  $gis_url = "http://services5.arcgis.com/Mj0hjvkNtV7NRhA7/arcgis/rest/services/Latest_WH/FeatureServer/0/query?where=wdpaid%3D^SITE_ID&objectIds=&time=&geometry=&geometryType=esriGeometryPoint&inSR=&spatialRel=esriSpatialRelIntersects&resultType=none&distance=0.0&units=esriSRUnit_Meter&returnGeodetic=true&outFields=&returnGeometry=true&returnCentroid=true&multipatchOption=xyFootprint&maxAllowableOffset=&geometryPrecision=&outSR=4326&returnIdsOnly=false&returnCountOnly=false&returnExtentOnly=false&returnDistinctValues=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&resultOffset=&resultRecordCount=&returnZ=false&returnM=false&quantizationParameters=&sqlFormat=none&f=pgeojson&token=";
  $gis_url = strtr($gis_url, ['^SITE_ID' => $node->field_wdpa_id->value]);
  $geojson = file_get_contents($gis_url);
  /** @var File $file */
  $file = $node->field_geojson->entity;
  file_put_contents($file->getFileUri(), $geojson);
}
