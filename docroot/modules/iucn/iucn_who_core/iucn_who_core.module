<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Render\BubbleableMetadata;
use \Drupal\iucn_who_core\ToolbarHandler;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Breadcrumb\Breadcrumb;
use Drupal\Core\Form\FormStateInterface;
use Drupal\role_hierarchy\Service\RoleHierarchyHelper;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\ResultRow;
use Drupal\views\ViewExecutable;

define('TAXONOMY_SITE_CONSERVATION_RATING', 'conservation_rating');

/**
 * Returns the HTML ID of a field wrapper element.
 *
 * @param $fieldName
 *
 * @return string
 */
function get_wrapper_html_id($fieldName) {
  return '#edit-' . Html::getId($fieldName) . '-wrapper';
}

/**
 * Implements hook_views_data_alter().
 */
function iucn_who_core_views_data_alter(array &$data) {
  $data['users']['user_assignments'] = array(
    'title' => t('User Assignments'),
    'field' => array(
      'title' => t('Assignments'),
      'help' => t('Assignments.'),
      'id' => 'iucn_who_core_user_assignments',
    ),
  );
  $data['users']['user_assessor'] = array(
    'title' => t('Assessor'),
    'field' => array(
      'title' => t('Assessor'),
      'help' => t('Assessor.'),
      'id' => 'iucn_who_core_assessor',
    ),
  );
  $data['users']['user_coordinator'] = array(
    'title' => t('Coordinator'),
    'field' => array(
      'title' => t('Coordinator'),
      'help' => t('Coordinator.'),
      'id' => 'iucn_who_core_coordinator',
    ),
  );
  $data['users']['user_reviewer'] = array(
    'title' => t('Reviewer'),
    'field' => array(
      'title' => t('Reviewer'),
      'help' => t('Reviewer.'),
      'id' => 'iucn_who_core_reviewer',
    ),
  );

  $data['views']['iucn_nothing'] = [
    'title' => t('Iucn custom'),
    'field' => [
      'id' => 'iucn_custom',
    ],
  ];
}

/**
 * Implements hook_toolbar().
 */
function iucn_who_core_toolbar() {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ToolbarHandler::class)
    ->toolbar();
}

/**
 * Implements hook_views_pre_view().
 */
function iucn_who_core_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'content' && $display_id == 'page_2') {
    $account = \Drupal::currentUser();
    $is_iucn_manager = in_array('iucn_manager', $account->getRoles());
    $is_administrator = in_array('administrator', $account->getRoles());
    if ($is_iucn_manager || $is_administrator) {
      return;
    }
    $view->removeHandler($view->current_display, 'field', 'views_bulk_operations_bulk_form');
  }
}

/**
 * Replace user text field with select box.
 */
function iucn_who_core_add_users_by_role(&$form, $field_id, $display_id, $empty_option, $user) {
  if (empty($form[$field_id])) {
    return;
  }
  if (
    !$user->hasRole('administrator') &&
    !$user->hasRole('iucn_manager') &&
    !$user->hasRole('coordinator')
  ) {
    hide($form[$field_id]);
    return;
  }
  $view = \Drupal\views\Views::getView('users_by_roles');
  $view->setDisplay($display_id);
  $view->execute();
  $options = [];
  foreach ($view->result as $row) {
    $options[$row->uid] = $row->_entity->getAccountName();
  }
  $form[$field_id]['#type'] = 'select';
  $form[$field_id]['#multiple'] = FALSE;
  $form[$field_id]['#empty_option'] = $empty_option;
  $form[$field_id]['#options'] = $options;
  unset($form[$field_id]['#size']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the artist options on artwork pages.
 */
function iucn_who_core_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!in_array($form['#id'], [
    'views-exposed-form-account-assignments-block-1',
    'views-exposed-form-account-assignments-block-2',
    'views-exposed-form-account-assignments-block-3',
    'views-exposed-form-account-assignments-block-4',
    'views-exposed-form-account-assignments-block-5',
    'views-exposed-form-content-page-2',
  ])) {
    return;
  }

  $uid = \Drupal::currentUser()->id();
  $user = User::load($uid);

  // Assessor list.
  iucn_who_core_add_users_by_role($form, 'assessor_id', 'entity_reference_2', t('- Assessor -'), $user);
  // Reviewer list.
  iucn_who_core_add_users_by_role($form, 'reviewers_id', 'entity_reference_3', t('- Reviewer -'), $user);
  // Coordinator list.
  iucn_who_core_add_users_by_role($form, 'coordinator_id', 'entity_reference_1', t('- Coordinator -'), $user);
}

/**
 * Implements hook_entity_operation().
 */
function iucn_who_core_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if (!(\Drupal::currentUser()->hasPermission('access content'))) {
    return;
  }
  $current_uri = \Drupal::request()->getRequestUri();
  if (!strpos($current_uri, 'admin/dashboard')) {
    return;
  }
  if ($entity->getEntityTypeId() !== 'node') {
    return;
  }
  if ($entity->getType() === 'site_assessment') {
    $operations['edit']['url'] = Url::fromRoute('entity.node.edit_form', ['node' => $entity->id()]);
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function iucn_who_core_page_attachments_alter(array &$attachments) {
  // Trim metatag desc.
  if (!empty($attachments['#attached']['html_head'])) {
    foreach ($attachments['#attached']['html_head'] as &$tag) {
      $is_meta = !empty($tag[0]['#tag']) && $tag[0]['#tag'] == 'meta';
      $is_desc = $is_meta && !empty($tag[0]['#attributes']['name']) && $tag[0]['#attributes']['name'] == 'description';
      if ($is_desc) {
        $summary = text_summary($tag[0]['#attributes']['content'], 'plain_text', 300);
        $tag[0]['#attributes']['content'] = preg_replace('/\n|\r|\t/m', ' ', $summary);
      }
    }
  }
  _remove_header_links($attachments);
}

/**
 * Implements hook_entity_view_alter().
 */
function iucn_who_core_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Cheking view_mode for node.
  if ($build['#view_mode'] !== 'full' && $entity Instanceof NodeInterface) {
    return;
  }
  _remove_header_links($build);
}

function _remove_header_links(array &$attachments) {
  // Cheking html_head_link on attached tags in head.
  if (!isset($attachments['#attached']['html_head_link'])) {
    return;
  }
  // Array to unset.
  $unset_html_head_link = [
    'delete-form',
    'edit-form',
    'version-history',
    'revision',
    'display',
    'drupal:content-translation-overview',
    'drupal:content-translation-add',
    'drupal:content-translation-edit',
    'drupal:content-translation-delete',
    'shortlink',
  ];
  // Unset loop.
  foreach ($attachments['#attached']['html_head_link'] as $key => $value) {
    if (isset($value[0]['rel']) && in_array($value[0]['rel'], $unset_html_head_link)) {
      unset($attachments['#attached']['html_head_link'][$key]);
    }
  }
}

/**
 * Implements hook_theme().
 */
function iucn_who_core_theme($existing, $type, $theme, $path) {
  return [
    'benefits_map_block' => [
      'variables' => [
        'markup_map' => null,
        'categories' => [],
        'empty_selection_placeholder_markup' => null,
      ]
    ],
    'benefits_map_site_detail' => [
      'variables' => [
        'status' => [ 'label' => null, 'id' => null ],
        'title' => null,
        'country' => [ 'label' => null ],
        'thumbnail' => null,
        'inscription' => null,
        'link' => null,
        'stat_values' => null,
        'stat_threat' => null,
        'stat_protection' => null,
      ]
    ],
  ];
}

/**
 * Implements hook_path_insert().
 */
function iucn_who_core_path_insert($path) {
  _iucn_who_multilingual_path($path);
}

/**
 * Implements hook_path_update().
 */
function iucn_who_core_path_update($path) {
  _iucn_who_multilingual_path($path);
}

function _iucn_who_multilingual_path($path) {
  if (preg_match('/^\/node\/[0-9]*$/', $path['source'])) {
    if ($path['langcode'] == 'en') {
      foreach (\Drupal::languageManager()->getLanguages() as $language) {
        if ($language->getId() == 'en') {
          continue;
        }
        $conditions = [
          'source' => $path['source'],
          'langcode' => $language->getId(),
        ];
        $existing_alias = \Drupal::service('path.alias_storage')->load($conditions);
        if (empty($existing_alias)) {
          // Not translated.
          $path = \Drupal::service('path.alias_storage')->save($path['source'], $path['alias'], $language->getId());
        }
        elseif (!empty($path['original']['alias']) && $path['original']['alias'] == $existing_alias['alias']) {
          // Update alias.
          $existing_alias['alias'] = $path['alias'];
          $path = \Drupal::service('path.alias_storage')->save($path['source'], $path['alias'], $language->getId(), $existing_alias['pid']);
        }
      }
    }
  }
}

function iucn_who_core_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
  $parameters = $route_match->getParameters()->all();

  $cache_tags = $breadcrumb->getCacheTags();
  $cache_context = $breadcrumb->getCacheContexts();
  $cache_max = $breadcrumb->getCacheMaxAge();

  if ($route_match->getRouteName() == 'who.user-dashboard') {
    $breadcrumb = new Breadcrumb();
  }

  // Custom breadcrumb for Webforms.
  if (isset($parameters['webform']) && gettype($parameters['webform']) == 'object' && in_array($parameters['webform']->id(), ['site_feedback', 'ask_a_question'])) {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('Home'), '<front>'));
        $new_breadcrumb->addLink(Link::createFromRoute(t('More'), '<none>'));
        $nid = 1234;
        $url_object = Url::fromRoute('entity.node.canonical', ['node' => $nid], ['absolute' => FALSE]);
        $url_node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
        $new_breadcrumb->addLink(Link::fromTextAndUrl($url_node->getTitle(), $url_object));

      }
    }
    $breadcrumb = $new_breadcrumb;
  }

  // Custom breadcrumb for sites_search view.
  if (isset($parameters['view_id']) && $parameters['view_id'] == 'publications' && isset($parameters['display_id']) && $parameters['display_id'] == 'publications_page_database') {
    $new_breadcrumb = new Breadcrumb();
    $new_breadcrumb->addLink(Link::createFromRoute(t('Home'), '<front>'));
    $new_breadcrumb->addLink(Link::createFromRoute(t('More'), '<none>'));
    $breadcrumb = $new_breadcrumb;
  }

  // Custom breadcrumb for frequently_asked_questions view.
  if (isset($parameters['view_id']) && $parameters['view_id'] == 'frequently_asked_questions' && isset($parameters['display_id']) && $parameters['display_id'] == 'page_1') {
    $new_breadcrumb = new Breadcrumb();
    $new_breadcrumb->addLink(Link::createFromRoute(t('Home'), '<front>'));
    $new_breadcrumb->addLink(Link::createFromRoute(t('More'), '<none>'));
    $new_breadcrumb->addLink(Link::createFromRoute(t('FAQ'), '<none>'));
    $breadcrumb = $new_breadcrumb;
  }

  // Custom breadcrumb for sites_search view.
  if (isset($parameters['view_id']) && $parameters['view_id'] == 'sites_search' && isset($parameters['display_id']) && $parameters['display_id'] == 'sites_search_page_database') {
    $new_breadcrumb = new Breadcrumb();
    $new_breadcrumb->addLink(Link::createFromRoute(t('Home'), '<front>'));
    $new_breadcrumb->addLink(Link::createFromRoute(t('Explore sites'), '<none>'));
    $breadcrumb = $new_breadcrumb;
  }

  // Custom breadcrumb for publication ctype.
  if (!empty($parameters['node']) && ($parameters['node'] instanceof NodeInterface) && $parameters['node']->getType() == 'publication') {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      $new_breadcrumb->addLink($val);
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('More'), '<none>'));
      }
    }
    $breadcrumb = $new_breadcrumb;
  }

  // Custom breadcrumb for news view.
  if (isset($parameters['view_id']) && $parameters['view_id'] == 'news' && isset($parameters['display_id']) && $parameters['display_id'] == 'page_1') {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => &$val) {
      $new_breadcrumb->addLink($val);
    }
    $new_breadcrumb->addLink(Link::createFromRoute(t('News'), '<none>'));
    $breadcrumb = $new_breadcrumb;
  }

  // Custom breadcrumb for news ctype.
  if (!empty($parameters['node']) && ($parameters['node'] instanceof NodeInterface) && $parameters['node']->getType() == 'news') {
    $new_breadcrumb = new Breadcrumb();
    foreach ($breadcrumb->getLinks() as $key => $val) {
      $new_breadcrumb->addLink($val);
      if ($key == 0) {
        $new_breadcrumb->addLink(Link::createFromRoute(t('More'), '<none>'));
      }

    }
    $breadcrumb = $new_breadcrumb;
  }


  if (!empty($parameters['node']) && ($parameters['node'] instanceof NodeInterface) && $parameters['node']->getType() == 'site') {
    $new_breadcrumb = new Breadcrumb();


    foreach ($breadcrumb->getLinks() as $key => &$val) {
      if ($key == 1){
        /** @var  Drupal\Core\Link $val */
        $val->setText(t('Explore sites'));
      }
      if ($key != 2){
        $new_breadcrumb->addLink($val);
      }
    }
    $breadcrumb = $new_breadcrumb;
  }

  $menu_items = iucn_who_get_all_menu('main');

  // Remove duplicate labels from breadcrumb.
  $new_breadcrumb = new Breadcrumb();
  $text = NULL;
  foreach ($breadcrumb->getLinks() as $key => $val) {

    $currentLanguage = '';
    $default_language = \Drupal::languageManager()->getDefaultLanguage()->getId();
    $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
    if ($default_language != $current_language) {
      $currentLanguage = "/$current_language";
    }

    $url = $currentLanguage . $val->getUrl()->toString();

    if (array_key_exists($url, $menu_items)) {
      /** @val \Drupal\Core\Link $val */
      $val->setText($menu_items[$url]);
    }
    if ($text != $val->getText()) {
      $new_breadcrumb->addLink($val);
    }
    $text = $val->getText();
    /** @val \Drupal\Core\Link $val */
  }
  $breadcrumb = $new_breadcrumb;


  $breadcrumb->addCacheTags($cache_tags);
  $breadcrumb->addCacheContexts($cache_context);
  $breadcrumb->addCacheContexts(['url']);
  $breadcrumb->mergeCacheMaxAge($cache_max);

}

function iucn_who_get_all_menu($menu_name){
  $menu = iucn_who_get_menu($menu_name);
  $menu_items = [];
  foreach ($menu['#items'] as $item) {
    if ($item['url']->toString()) {
      $menu_items[$item['url']->toString()] = $item['title'];
    }
  }
  $menu = iucn_who_get_menu($menu_name, 2);
  foreach ($menu['#items'] as $item) {
    if ($item['url']->toString()) {
      $menu_items[$item['url']->toString()] = $item['title'];
    }
  }
  return $menu_items;
}

function iucn_who_get_menu($menu_name,$depth = 1) {

  $menu_tree = \Drupal::menuTree();
  // Build the typical default set of menu tree parameters.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters($menu_name);
  // Load the tree based on this set of parameters.
  $parameters->setMinDepth($depth);
  $tree = $menu_tree->load($menu_name, $parameters);
  // Transform the tree using the manipulators you want.
  $manipulators = array(
    // Only show links that are accessible for the current user.
    array('callable' => 'menu.default_tree_manipulators:checkAccess'),
    // Use the default sorting of menu links.
    array('callable' => 'menu.default_tree_manipulators:generateIndexAndSort'),
  );
  $tree = $menu_tree->transform($tree, $manipulators);
  // Finally, build a renderable array from the transformed tree.
  $menu = $menu_tree->build($tree);

  return $menu;
}

function mymodule_get_menu_items($menu_name) {

  $menu_data = mymodule_get_menu($menu_name);

  foreach ($menu_data['#items'] as $item) {
    if ($item['url']->getRouteName() == '') {
      $menu[] = [$item['title'] => $item['url']->getRouteName()];
    }
    else {
      $menu[] = [$item['title'] => $item['url']->getInternalPath()];
    }
  }

  return $menu;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function iucn_who_core_form_user_form_alter(array &$form, FormStateInterface $form_state) {
  $currentUser = \Drupal::currentUser();
  if (!$currentUser->hasPermission('edit own profile')) {
    $form['account']['mail']['#disabled'] = 'disabled';
    $form['field_user_title']['#access'] = FALSE;
  }

  $form['account']['mail']['#description'] = t('A valid email address. All emails from the system will be sent to this address. The email address is not made public.');
  $form['actions']['submit']['#submit'][] = '_iucn_who_core_password_reset_submit';
}

/**
 * Callback function for the password reset form.
 */
function _iucn_who_core_password_reset_submit(array $form, FormStateInterface $form_state) {
  $form_state->setRedirect('<front>');

  /** @var \Drupal\iucn_who_core\Service\UserAgreementService $userAgreementService */
  $userAgreementService = \Drupal::service('iucn_who_core.user_agreement');
  if (!$userAgreementService->userCanSkipAgreement() && !$userAgreementService->userAcceptedAgreement()) {
    $form_state->setRedirect('who.user_agreement_form');
  }
  else {
    $dashboard = Url::fromRoute('who.user-dashboard');
    if ($dashboard->access()) {
      $form_state->setRedirectUrl($dashboard);
    }
  }
}

function iucn_who_core_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['user_form', 'user_register_form'])) {
    // Users cannot add or remove user roles on a level higher than their role.
    $current_user = \Drupal::currentUser()->getAccount();
    $edited_user = $form_state->getFormObject()->getEntity();
    if ($edited_user instanceof UserInterface && $current_user->id() == $edited_user->id()) {
      return;
    }

    /** @var RoleHierarchyHelper $role_hierarchy_helper */
    $role_hierarchy_helper = \Drupal::service('role_hierarchy.helper');

    if ($role_hierarchy_helper->getAccountRoleWeight($current_user) == $role_hierarchy_helper->getRoleWeight('coordinator')) {
      unset($form['account']['roles']['#options']['coordinator']);
    }
  }

  if ($form_id == 'user_login_form') {
    $form['reset_password'] = [
      '#type' => 'link',
      '#title' => t('Reset your password'),
      '#url' => Url::fromRoute('user.pass'),
      '#attributes' => ['class' => ['btn', 'btn-primary']],
      '#weight' => '200',
    ];
  }

  if ($form_id == 'user_form') {
    $currentUser = \Drupal::currentUser();
    $formObject = $form_state->getFormObject();
    /** @var \Drupal\user\UserInterface $user */
    $user = $formObject->getEntity();
    if (!$currentUser->hasPermission('change other users agreement settings')
      || $user->id() === $currentUser->id()) {
      return;
    }

    $disabled = $user->field_user_agreement_disabled->value;

    array_unshift($form['actions']['submit']['#submit'], 'saveAgreement');
    $form['user_agreement_disabled'] = [
      '#type' => 'checkbox',
      '#title' => t('@agree_checkbox', ['@agree_checkbox' => t('Remove standard user agreement')]),
      '#default_value' => $disabled,
      '#weight' => 10,
    ];
  }

  if ($form_id == 'user_register_form') {
    $form['account']['pass']['#required'] = FALSE;
    $form['account']['mail']['#required'] = TRUE;
    $form['account']['name']['#title'] = t('Username (First name Last name)');
    $form['account']['field_user_title'] = $form['field_user_title'];
    unset($form['field_user_title']);

    $form['account']['notify_container'] = [
      '#type' => 'container',
      'notify_title' => [
        '#type' => 'html_tag',
        '#tag' => 'b',
        '#value' => t('Email notification'),
      ],
      'notify' => $form['account']['notify'],
    ];

    $form['actions']['submit']['#submit'][] = 'addRegisterFormSuccessMessage';
    unset($form['account']['notify']);
  }

  if (!empty($form['#webform_id']) && $form['#webform_id'] == 'site_feedback') {
    $form['#cache']['max-age'] = 0;
  }
}

function addRegisterFormSuccessMessage(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($form_state->getValue('notity')) {
    return;
  }

  $account = $form_state->getFormObject()->getEntity();
  \Drupal::messenger()->addStatus(t('Created a new user account for <a href=":url">%name</a>.', [':url' => $account->url(), '%name' => $account->getUsername()]));
}

function saveAgreement(array $form, FormStateInterface $form_state) {
  $formObject = $form_state->getFormObject();

  $user = $formObject->getEntity();
  $user->set('field_user_agreement_disabled', $form_state->getValue('user_agreement_disabled'));

  $formObject->setEntity($user);
  $form_state->setFormObject($formObject);
}

/**
 * Implements hook_preprocess_menu().
 *
 * Hides links from tools menu, if user doesn't have access rights.
 */
function iucn_who_core_preprocess_menu(&$variables) {
  if (empty($variables['items'])) {
    return;
  }
  if (!empty($variables['menu_name']) && $variables['menu_name'] == 'tools') {
    if (!admin_toolbar_links_access_filter_user_has_admin_role($variables['user'])) {
      $items = &$variables['items'];
      foreach ($variables['items'] as $route => &$item) {
        $route_name = $route;
        $route_params = [];
        if (!empty($item['original_link'])) {
          /** @var \Drupal\Core\Menu\MenuLinkBase $original_link */
          $original_link = $item['original_link'];
          if ($original_link->getUrlObject()->isExternal()) {
            // Do not filter external URL at all.
            continue;
          }
          $route_name = $original_link->getRouteName();
          $route_params = $original_link->getRouteParameters();
        }

        // Check, if user has access rights to the route.
        if (!\Drupal::accessManager()->checkNamedRoute($route_name, $route_params)) {
          unset($items[$route]);
        }
        else {
          if (!empty($items[$route]['below'])) {
            // Recursively call this function for the child items.
            admin_toolbar_links_access_filter_filter_non_accessible_links($items[$route]['below']);
          }
          if (empty($items[$route]['below'])) {
            unset($items[$route]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_tokens().
 */
function iucn_who_core_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type == 'node' && !empty($data['node'])) {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $data['node'];

    $token_service = \Drupal::token();
    if ($userTokens = $token_service->findWithPrefix($tokens, 'revision_uid')) {
      $replacements += $token_service->generate('user', $userTokens, ['user' => $node->get('revision_uid')->entity], $options, $bubbleable_metadata);
    }
  }

  return $replacements;
}

/**
 * Implements hook_views_pre_render().
 */
function iucn_who_core_views_pre_render(ViewExecutable $view) {
  switch ([$view->id(), $view->current_display]) {
    case ['assessments_reports', 'changes_in_ratings_between_cycles']:
    case ['assessments_reports', 'changes_in_ratings_between_cycles_excel']:
      $fields = [
        'field_as_vass_wh_state' => 'World heritage value',
        'field_as_vass_wh_trend' => 'World heritage trend',
        'field_as_vass_bio_state' => 'Other biodiversity value',
        'field_as_vass_bio_trend' => 'Other biodiversity trend',
        'field_as_threats_current_rating' => 'Current threats',
        'field_as_threats_potent_rating' => 'Potential threats',
        'field_as_threats_rating' => 'Overall assessment of threats',
        'field_as_protection_ov_rating' => 'Protection and management',
        'field_as_protection_ov_out_rate' => 'Protection and management (Threats outside of site)',
        'field_as_global_assessment_level' => 'Conservation outlook',
      ];

      $newResults = [];
      foreach ($view->result as $key => &$value) {
        foreach ($fields as $field => $fieldLabel) {
          $newValue = clone $value;
          $newValue->field = $field;
          $newValue->fieldLabel = $fieldLabel;
          $newResults[] = $newValue;
        }
      }

      $view->result = $newResults;
      break;
  }
}
