<?php

use Drupal\iucn_assessment\Plugin\AssessmentCycleCreator;
use Drupal\iucn_assessment\Plugin\AssessmentWorkflow;
use Drupal\paragraphs\ParagraphInterface;
use Psr\Log\LoggerInterface;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;

/**
 * Update the field_css_identifier for some terms.
 */
function iucn_assessment_update_8001() {
  $css_identifiers = [
    'data-deficient' => ['Data Deficient'],
    'good' => ['Highly Effective', 'Very Low Threat', 'Good'],
    'good-concerns' => ['Effective', 'Low Threat', 'Low Concern'],
    'significant-concern' => ['Some Concern', 'High Threat', 'High Concern'],
    'critical' => ['Serious Concern', 'Very High Threat', 'Critical'],
  ];

  $taxonomies = ['assessment_protection_rating', 'assessment_threat_level', 'assessment_value_state'];

  foreach ($taxonomies as $vid) {
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
    foreach ($terms as $term) {
      $term = Term::load($term->tid);
      $class = NULL;
      foreach ($css_identifiers as $css_id => $values) {
        if (in_array($term->getName(), $values)) {
          $class = $css_id;
          break;
        }
      }
      if (!empty($class)) {
        $term->field_css_identifier->value = $class;
        $term->save();
      }
    }
  }
}

function _iucn_assessment_update_terms_weights(array $tids) {
  foreach($tids as $weight => $tid) {
    $term = Term::load($tid);
    $term->setWeight($weight);
    $term->save();
  }
}

/**
 * Refs #5902 #5903 #5904 #5905 #5906 #6108. Taxonomy terms weight.
 */
function iucn_assessment_update_8002() {
  $term = Term::load(1433);
  $term->setName('Collection of non-timber forest products (NTFPs)');
  $term->save();

  // Threats categories weights.
  _iucn_assessment_update_terms_weights([
    1351, // Residential and Commercial Development
    1352, // Agriculture and Aquaculture
    1353, // Energy Production and Mining
    1354, // Transportation and Service Corridors
    1355, // Biological Resource Use
    1356, // Human Intrusions & Disturbance
    1357, // Natural System Modifications
    1358, // Invasive and Other Problematic Species & Genes
    1359, // Pollution
    1360, // Geological Events
    1361, // Climate Change & Severe Weather
    1362, // Social/ Cultural Changes
    1363, // Other
  ]);

  // Threat levels weights.
  _iucn_assessment_update_terms_weights([
    1364, // Very Low Threat
    1365, // Low Threat
    1366, // High Threat
    1367, // Very High Threat
    1368, // Data Deficient
  ]);

  // Protection rating.
  _iucn_assessment_update_terms_weights([
    1325, // Highly Effective
    1326, // Effective
    1327, // Some Concern
    1328, // Serious Concern
    1329, // Data Deficient
  ]);

  // Value states.
  _iucn_assessment_update_terms_weights([
    1346, // Good
    1347, // Low Concern
    1348, // High Concern
    1349, // Critical
    1350, // Data Deficient
  ]);

  // Value trend.
  _iucn_assessment_update_terms_weights([
    1416, // Improving
    1417, // Stable
    1418, // Deteriorating
    1419, // Data Deficient
  ]);

  // Benefits impact level.
  _iucn_assessment_update_terms_weights([
    1318, // Very High
    1319, // High
    1320, // Moderate
    1321, // Low
  ]);

  // Benefits impact trend.
  _iucn_assessment_update_terms_weights([
    1322, // Increasing
    1323, // Continuing
    1324, // Decreasing
  ]);

  // Benefits categories.
  _iucn_assessment_update_terms_weights([
    1298, // Food
    1299, // Water
    1300, // Cultural and spiritual values
    1301, // Health and recreation
    1302, // Knowledge
    1303, // Environmental services
    1304, // Materials
    1305, // Contribution to local economy
  ]);

  // Benefits categories.
  _iucn_assessment_update_terms_weights([
    1272, // History and tradition
    1273, // Wilderness and iconic features
    1274, // Sacred natural sites or landscapes
    1294, // Sacred or symbolic plants or animals
    1295, // Cultural identity and sense of belonging
  ]);

  // Topics.
  _iucn_assessment_update_terms_weights([
    1333, // Management system (for transboundary/serial properties, integrated management system should also be described/evaluated)
    1334, // Effectiveness of management system
    1336, // Boundaries
    1332, // Integration into regional and national planning systems (including sea/landscape connectivity)
    1330, // Relationships with local people (including stakeholder relationships, participatory management, rights, and access to benefits and equity)
    1331, // Legal framework
    1345, // Law enforcement
    1335, // Implementation of Committee decisions and recommendations
    1339, // Sustainable use
    1337, // Sustainable finance
    1338, // Staff capacity, training and development
    1340, // Education and interpretation programs
    1341, // Tourism and visitation management
    1342, // Monitoring
    1343, // Research
  ]);
}

/**
 * Set 2014 and 2017 cycles as "created".
 * Create 2020 assessments.
 */
function iucn_assessment_update_8003() {
  \Drupal::state()->set(AssessmentCycleCreator::CREATED_CYCLES_STATE, [2014, 2017]);
  \Drupal::state()->set(AssessmentWorkflow::CURRENT_WORKFLOW_CYCLE_STATE_KEY, 2020);
}

/**
 * refs #7209 - Change the label of "Effective" to "Mostly Effective"
 */
function iucn_assessment_update_8004() {
  $term = Term::load(1326);
  $term->setName('Mostly Effective');
  $term->save();
}

/**
 * refs #6378 - reorder protection and management paragraphs for 2017 cycle.
 */
function iucn_assessment_update_8005() {
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'type' => 'site_assessment',
      'field_as_cycle' => 2017,
    ]);

  /** @var AssessmentCycleCreator $assessmentCycleService */
  $assessmentCycleService = \Drupal::service('iucn_assessment.cycle_creator');
  foreach ($nodes as $node) {
    $assessmentCycleService->reorderProtectionParagraphs($node, AssessmentCycleCreator::PROTECTION_PARAGRAPHS_ORDER[2017]);
    $node->save();
  }
}

/**
 * refs #6378 - reorder protection and management paragraphs for 2020 cycle.
 */
function iucn_assessment_update_8006() {
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'type' => 'site_assessment',
      'field_as_cycle' => 2020,
    ]);

  /** @var AssessmentCycleCreator $assessmentCycleService */
  $assessmentCycleService = \Drupal::service('iucn_assessment.cycle_creator');
  foreach ($nodes as $node) {
    $assessmentCycleService->reorderProtectionParagraphs($node, AssessmentCycleCreator::PROTECTION_PARAGRAPHS_ORDER[2020]);
    $node->save();
  }
}

/**
 * refs #6378 - reorder protection and management paragraphs for 2017 cycle (on all node revisions).
 */
function iucn_assessment_update_8007() {
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'type' => 'site_assessment',
      'field_as_cycle' => 2017,
    ]);

  /** @var AssessmentCycleCreator $assessmentCycleService */
  $assessmentCycleService = \Drupal::service('iucn_assessment.cycle_creator');
  /** @var \Drupal\iucn_assessment\Plugin\AssessmentWorkflow $assessmentService */
  $assessmentService = \Drupal::service('iucn_assessment.workflow');
  /** @var \Drupal\node\NodeStorage $nodeStorage */
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
  foreach ($nodes as $node) {
    $revisionIds = $nodeStorage->revisionIds($node);
    foreach ($revisionIds as $revisionId) {
      /** @var \Drupal\node\Entity\Node $revision */
      $revision = $nodeStorage->loadRevision($revisionId);
      $assessmentCycleService->reorderProtectionParagraphs($revision, AssessmentCycleCreator::PROTECTION_PARAGRAPHS_ORDER[2017]);
      $revision->save();
    }
  }
}

/**
 * refs #6378 - reorder protection and management paragraphs for 2020 cycle (on all node revisions).
 */
function iucn_assessment_update_8008() {
  /** @var \Drupal\node\NodeInterface[] $nodes */
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'type' => 'site_assessment',
      'field_as_cycle' => 2020,
    ]);

  /** @var AssessmentCycleCreator $assessmentCycleService */
  $assessmentCycleService = \Drupal::service('iucn_assessment.cycle_creator');
  /** @var \Drupal\iucn_assessment\Plugin\AssessmentWorkflow $assessmentService */
  $assessmentService = \Drupal::service('iucn_assessment.workflow');
  /** @var \Drupal\node\NodeStorage $nodeStorage */
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
  foreach ($nodes as $node) {
    $revisionIds = $nodeStorage->revisionIds($node);
    foreach ($revisionIds as $revisionId) {
      /** @var \Drupal\node\Entity\Node $revision */
      $revision = $nodeStorage->loadRevision($revisionId);
      $assessmentCycleService->reorderProtectionParagraphs($revision, AssessmentCycleCreator::PROTECTION_PARAGRAPHS_ORDER[2020]);
      $revision->save();
    }
  }
}

/**
 * refs #6378 - remove benefits paragraphs with hidden categories.
 */
function iucn_assessment_update_8009() {
  /** @var \Drupal\node\NodeStorage $nodeStorage */
  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');

  foreach ([2017, 2020] as $year) {
    /** @var \Drupal\node\NodeInterface[] $nodes */
    $nodes = $nodeStorage->loadByProperties([
      'type' => 'site_assessment',
      'field_as_cycle' => $year,
    ]);

    $hiddenCategories = [1263, 1264, 1297];
    foreach ($nodes as $node) {
      $revisionIds = $nodeStorage->revisionIds($node);
      foreach ($revisionIds as $revisionId) {
        /** @var \Drupal\node\Entity\Node $revision */
        $revision = $nodeStorage->loadRevision($revisionId);
        $count = 0;
        for ($i = 0; $i < $revision->get('field_as_benefits')->count(); $i++) {
          $paragraph = $revision->get('field_as_benefits')->get($i)->entity;
          $benefitCategories = $paragraph->get('field_as_benefits_category')->getValue();
          if (empty($benefitCategories)) {
            continue;
          }
          $benefitCategories = array_column($benefitCategories, 'target_id');
          // If the paragraph only has categories that are hidden, dereference it.
          if (empty(array_diff($benefitCategories, $hiddenCategories))) {
            $revision->get('field_as_benefits')->removeItem($i);
            $i--;
            $count++;
          }
        }
        if ($count) {
          \Drupal::logger('iucn_assessment')->info(t('Removed @count broken benefits from @title (nid: @nid, vid: @vid)', [
            '@count' => $count,
            '@title' => $revision->getTitle(),
            '@nid' => $revision->id(),
            '@vid' => $revision->getRevisionId()
          ]));
          $revision->save();
        }
      }
    }
  }
}

/**
 * Refs #8032 - fix 2020 Comoé National Park assessment.
 */
function iucn_assessment_update_8010() {
  /** @var \Drupal\iucn_assessment\Plugin\AssessmentCycleCreator $cycleCreator */
  $cycleCreator = \Drupal::service('iucn_assessment.cycle_creator');
  $comoe2017 = Node::load(1591);
  /** @var \Drupal\node\NodeInterface $brokenComoe2020 */
  $brokenComoe2020 = \Drupal::entityTypeManager()->getStorage('node')->loadRevision('6238');
  $brokenComoe2020->setTitle("[BROKEN] " . $brokenComoe2020->getTitle());
  $newComoe2020 = $cycleCreator->createDuplicateAssessment($comoe2017, 2020, 2017);
  $newComoe2020->set( 'langcode', 'fr');
  $newComoe2020->set( 'field_coordinator', 773);
  $newComoe2020->set( 'field_assessor', 2434);
  $newComoe2020->save();
}
