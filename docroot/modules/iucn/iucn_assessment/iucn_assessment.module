<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Drupal\iucn_assessment\Form\NodeSiteAssessmentForm;
use Drupal\iucn_assessment\Form\NodeSiteAssessmentStateChangeForm;
use Drupal\iucn_assessment\Form\NodeSiteAssessmentAssignUsersForm;
use Drupal\user\Entity\User;
use Drupal\workflow\Entity\WorkflowState;
use Drupal\Core\Url;
use Drupal\iucn_assessment\Plugin\AssessmentWorkflow;
use Drupal\node\NodeInterface;

function iucn_assessment_theme() {
  return [
    'assessment_horizontal_tabs' => array(
      'render element' => 'element',
      'template' => 'assessment-horizontal-tabs',
      'file' => 'templates/theme.inc',
    ),
    'field_group_html_element_list' => [
      'render element' => 'element',
      'template' => 'field-group-html-element-list',
    ],
    'rating_image_switcher' => [
      'render element' => 'element',
      'template' => 'rating-image-switcher',
    ],
  ];

}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * @param array $suggestions
 * @param array $variables
 * @param $hook
 */
function iucn_assessment_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  switch ($hook) {
    case 'assessment_horizontal_tabs':
      $element = $variables['element'];

      $name = $element['#group_name'];
      $entity_type = $element['#entity_type'];
      $bundle = $element['#bundle'];

      $wrapper = '';
      if (isset($element['#wrapper_element'])) {
        $wrapper = $element['#wrapper_element'];
        $suggestions[] = $hook . '__' . $wrapper;
      }

      $suggestions[] = $hook . '__' . $entity_type;
      $suggestions[] = $hook . '__' . $bundle;
      $suggestions[] = $hook . '__' . $name;

      if ($wrapper) {
        $suggestions[] = $hook . '__' . $entity_type . '__' . $wrapper;
      }

      $suggestions[] = $hook . '__' . $entity_type . '__' . $bundle;
      $suggestions[] = $hook . '__' . $entity_type . '__' . $name;

      if ($wrapper) {
        $suggestions[] = $hook . '__' . $entity_type . '__' . $bundle . '__' . $wrapper;
      }
      $suggestions[] = $hook . '__' . $entity_type . '__' . $bundle . '__' . $name;
      break;
  }

}

/**
 * Implements hook_entity_form_display_alter().
 */
function iucn_assessment_entity_form_display_alter(&$form_display, $context) {
  $id = $context['entity_type'] . '.' . $context['bundle'];
  if (($id == 'node.site_assessment') || ($context['entity_type'] == 'paragraph')) {
    $form_modes = \Drupal::entityManager()->getFormModeOptionsByBundle($context['entity_type'], $context['bundle']);
    $tab = \Drupal::request()->query->get('tab');
    $tab = str_replace('-', '_', $tab);
    if ($tab && !empty($form_modes[$tab])) {
      $entity_default_display = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load($id . '.' . $tab);
      if ($entity_default_display) {
        $form_display = $entity_default_display;
      }
    }
  }
}


function template_preprocess_rating_image_switcher(&$variables) {
  $element = $variables['element'];
  $variables['images'] = $element['#images'];
  $variables['years'] = $element['#years'];

  $iucn_config = \Drupal::config('iucn_who.settings');
  $year = $iucn_config->get('assessment_year');
  $variables['active_year'] = $year;

}

function template_preprocess_field_group_html_element_list(&$variables) {

  $element = $variables['element'];

  if (!empty($element['#title']) && !empty($element['#title_element'])) {
    $variables['title_element'] = $element['#title_element'];
    $variables['title'] = $element['#title'];
  }

  $variables['wrapper_element'] = $element['#wrapper_element'];
  $variables['attributes'] = $element['#attributes'];
  $variables['list'] = $element['list'];

}


/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function iucn_assessment_node_presave(Drupal\node\Entity\Node $node) {
  if ($node->bundle() == 'site' && !$node->isNew()) {
    _iucn_assessment_set_site_assessments($node);
  }
  elseif ($node->bundle() == 'site_assessment') {
    /** @var \Drupal\iucn_assessment\Plugin\AssessmentWorkflow $workflow_service */
    $workflow_service = \Drupal::service('iucn_assessment.workflow');
    $workflow_service->assessmentPreSave($node);
  }
}

/**
 * Implements hook_node_update().
 */
function iucn_assessment_node_update(Drupal\node\Entity\Node $node) {
  if ($node->bundle() == 'site_assessment' && !empty($node->field_as_site->entity)) {
    $site = $node->field_as_site->entity;
    if (!empty($site)) {
      // Reset site assessments for this site.
      _iucn_assessment_set_site_assessments($site);
      $site->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function iucn_assessment_node_view(array &$build, EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  global $_iucn_assessment_is_latest_assessment;
  // Show a notice on PDF print that when is not latest.
  if ($entity->bundle() == 'site' && $view_mode == 'pdf') {
    if (empty($_iucn_assessment_is_latest_assessment)) {
      $build['#attributes']['class'][] = 'showing-old-assessment';
    }
    else {
      $build['#attributes']['class'][] = 'showing-latest-assessment';
    }
  }
}

/**
 * Implements hook_preprocess_field().
 */
function iucn_assessment_preprocess_field(&$variables) {
  switch ($variables['field_name']) {
    case 'field_designation':
      $display_year = iucn_pdf_assessment_year_display($variables['element']['#object']);
      if ($display_year == \Drupal::service('iucn_assessment.assessments_year')->first()) {
        $variables['attributes']['class'][] = 'invisible';
      }
      break;

    case 'field_assessments':
      $variables['element']['#cache']['contexts'][] = 'url';
      if (!empty($variables['items'])) {
        $iucn_config = \Drupal::config('iucn_who.settings');
        $config_year = $iucn_config->get('assessment_year');
        $display_year = iucn_pdf_assessment_year_display($variables['element']['#object']);
        $showing_item = NULL;
        foreach ($variables['items'] as $item) {
          /* @var \Drupal\node\Entity\Node $assessment */
          $assessment = $item['content']['#node'];
          if ($assessment->field_as_cycle->value == $display_year
            && $assessment->access('view')) {
            $showing_item = $item;
            $variables['element']['#cache']['tags'][] = 'node:' . $assessment->id();
            break;
          }
        }

        // Handle custom revision display
        $node_revision = _iucn_assessment_display_negociate_assessment_revision();
        if ($node_revision && $node_revision->id() == $showing_item['content']['#node']->id()) {
          $showing_item['content']['#node'] = $node_revision;
          drupal_set_message(t('Showing assessment revision from @revision',
            ['@revision' => date('Y-m-d H:i', $node_revision->getRevisionCreationTime())]));
        }

        $variables['attributes']['class'][] = $config_year == $display_year ? 'showing-latest-assessment' : 'showing-old-assessment';
        $variables['items'] = !empty($showing_item) ? [$showing_item] : [];

      }
      break;

    case 'field_as_protection':
      // Sort this field by taxonomy term.
      if (empty($variables['items'][0]['content']['#paragraph'])) {
        break;
      }
      $items = $variables['items'];
      usort($items,
      function($a, $b) {
        $a_weight = 0;
        if ($a['content']['#paragraph']->field_as_protection_topic->count()) {
          $a_weight = $a['content']['#paragraph']->field_as_protection_topic->entity->getWeight();
        }
        $b_weight = 0;
        if ($b['content']['#paragraph']->field_as_protection_topic->count()) {
          $b_weight = $b['content']['#paragraph']->field_as_protection_topic->entity->getWeight();
        }
        if ($a_weight == $b_weight) {
          return 0;
        }
        return ($a_weight < $b_weight) ? -1 : 1;
      }
      );

      break;

    case 'field_as_threats_categories':
      // Hide the parent terms for this field - show only sub-categories
      /*if (count($variables['items']) == 2) {
        unset($variables['items'][0]);
      }*/
      break;

    case 'field_as_references':
      // Sort this field by string alphabetically.
      if (empty($variables['items'][0]['content']['#context']['value'])) {
        break;
      }

      // Transform links to url and trim.
      /** @var \Drupal\filter\FilterPluginManager $filter_manager */
      $filter_manager = \Drupal::service('plugin.manager.filter');
      /** @var \Drupal\filter\Plugin\FilterBase $filter */
      $filter = $filter_manager->createInstance('filter_url');
      $filter->settings['filter_url_length'] = 60;

      $items = $variables['items'];
      foreach ($items as &$item) {
        $value = _filter_html_escape($item['content']['#context']['value']);
        $item['content']['#template'] = '{{ value|raw|nl2br }}';
        $value = $filter->process($value, 'en');
        $item['content']['#context']['value'] = $value->__toString();
      }

      usort($items,
        function ($a, $b) {
          $a_string = $a['content']['#context']['value'];
          $b_string = $b['content']['#context']['value'];
          return (strcmp($a_string, $b_string));
        }
      );
      $variables['items'] = $items;
      break;

    case 'field_as_benefits':
      // Hide "nature conservation values" benefits for 2017 assessments.
      if (
        empty($variables['items'][0]['content']['#paragraph'])
        || $variables['element']['#object']->field_as_cycle->value == \Drupal::service('iucn_assessment.assessments_year')->first()
      ) {
        break;
      }
      foreach ($variables['items'] as $idx => &$item) {
        if ($tid = $item['content']['#paragraph']->field_as_benefits_category->target_id) {
          $storage = \Drupal::service('entity_type.manager')
            ->getStorage('taxonomy_term');
          $parent = $storage->loadParents($tid);
          $parent = reset($parent);
          if ($parent && $parent->getName() == t('Nature conservation values')) {
            unset($variables['items'][$idx]);
          }
        }
      }
      break;

    case 'field_as_threats_extent':
      foreach ($variables['items'] as $key => $item) {
        $variables['items'][$key]['content']['#plain_text'] = ', ' . $variables['items'][$key]['content']['#plain_text'];
      }
      break;

    default:
      break;
  }
}

function _iucn_assessment_display_negociate_assessment_revision(\Drupal\node\Entity\Node $node = NULL) {
  if (empty($node)) {
    // Load site from url.
    $request = \Drupal::request();
    if ($request->attributes->get('_route') !== 'entity.node.canonical') {
      return NULL;
    }
    $node = $request->attributes->get('node');
  }
  if ($node->bundle() != 'site') {
    return NULL;
  }
  $request = \Drupal::request();
  $revision = $request->get('revision');
  if (empty($revision)) {
    return NULL;
  }
  /** @var Drupal\node\Entity\Node $node_revision */
  $node_revision = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadRevision($revision);
  if (empty($node_revision)) {
    return NULL;
  }
  foreach ($node->field_assessments as $idx => $assessment) {
    if ($node_revision && $node_revision->id() == $assessment->entity->id()) {
      drupal_set_message(t('Showing assessment revision @revision', ['@revision' => $revision]));
      return $node_revision;
    }
  }
  return NULL;
}

function _iucn_assessment_set_site_assessments($node) {
  // Set assessment field.
  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'site_assessment');
  $query->condition('field_as_site.target_id', $node->id());
  $entity_ids = $query->execute();
  $field_values = [];
  if (!empty($entity_ids)) {
    foreach ($entity_ids as $id) {
      $field_values[] = ['target_id' => $id];
    }
  }
  $node->field_assessments = $field_values;

  $iucn_config = \Drupal::config('iucn_who.settings');
  $current_year = $iucn_config->get('assessment_year');

  // Set current assessment.
  $query = \Drupal::entityQuery('node');
  $query->condition('status', 1);
  $query->condition('type', 'site_assessment');
  $query->condition('field_as_site.target_id', $node->id());
  $query->condition('field_as_cycle.value', $current_year);
  $query->range(0, 1);
  $query->sort('changed', 'desc');
  $entity_ids = $query->execute();

  $field_values = [];
  if (!empty($entity_ids)) {
    $field_values[] = ['target_id' => current($entity_ids)];
  }
  $node->field_current_assessment = $field_values;


}

function iucn_assessment_field_group_pre_render(&$element, &$group, &$rendering_object) {
  global $_iucn_assessment_display_year;
  if (!empty($element['#group_name']) && $element['#group_name'] == 'group_conservation_outlook') {
    if (!empty($element['field_as_end_date']['#object']->field_as_cycle)) {
      $element['#title'] = $element['field_as_end_date']['#object']->field_as_cycle->value . ' ' . $element['#title'];
    }
  }

  // Specific request to hide show only for 2017 assessments.
  if (!empty($element['#group_name'])
    && ($element['#group_name'] == 'group_key_conservation_issues' || $element['#group_name'] == 'group_community')) {
    if (!empty($_iucn_assessment_display_year) && $_iucn_assessment_display_year != \Drupal::service('iucn_assessment.assessments_year')->first()) {
      $element['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_webform_element_alter().
 */
function iucn_assessment_webform_element_alter(array &$element, FormStateInterface $form_state, array $context) {
  if ($element['#webform_id'] == 'site_feedback--subject' && $element['#webform_key'] == 'subject') {
    /* @var \Drupal\node\Entity\Node $node */
    $node = \Drupal::routeMatch()->getParameter('node');
    if (is_object($node) && $node->bundle() == 'site') {
      $element['#default_value'] = t('Feedback on @site', ['@site' => $node->getTitle()]);
      $element['#attributes']['readonly'] = 'readonly';
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter().
 */
function iucn_assessment_ds_pre_render_alter(array &$layout_render_array, array $context, array &$vars) {
  /** @var \Drupal\node\Entity\Node $entity */
  $entity = $context['entity'];
  if ($entity->bundle() == 'site_assessment') {
    $year = $entity->field_as_cycle->value;
    // 2017 assessments shouldn't have "Other important biodiversity values".
    if ($year != \Drupal::service('iucn_assessment.assessments_year')->first()) {
      unset(
        $vars['content']['full_assessment_values']['group_assessment_information']['group_state_and_trend_of_values']['group_assessing_current_state']['display_field_copy:node-other_biodiv_values']
      );
    }
  }
}

function iucn_assessment_add_states(&$form, $pagegraph_name, $visibility_field_name, $conditon_field_name) {
  foreach ($form[$pagegraph_name]['widget'] as $key => $field) {
    if (
      is_array($field) &&
      !empty($field['#type']) &&
      $field['#type'] == 'container' &&
      !empty($field['#paragraph_type'])
    ) {
      $selector = 'edit-' . $pagegraph_name . '-' . $key . '-subform-' . $conditon_field_name;
      $selector = str_replace('_', '-', $selector);
      $form[$pagegraph_name]['widget'][$key]['subform'][$visibility_field_name]['#states'] = array(
        'visible' => array(
          ':input[data-drupal-selector="' . $selector . '"]' => array('checked' => TRUE),
        ),
      );

    }
  }
}

/**
 * Implements hook_form_alter().
 */
function iucn_assessment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_site_assessment_form' || $form_id == 'node_site_assessment_edit_form') {
    $visibility_field_name = 'field_as_threats_extent';
    $conditon_field_name = 'field_as_threats_in_value';
    $pagegraph_name = 'field_as_threats_current';
    iucn_assessment_add_states($form, $pagegraph_name, $visibility_field_name, $conditon_field_name);
    $pagegraph_name = 'field_as_threats_potential';
    iucn_assessment_add_states($form, $pagegraph_name, $visibility_field_name, $conditon_field_name);

    NodeSiteAssessmentForm::alter($form, $form_state, $form_id);
  }
  elseif ($form_id == 'node_site_assessment_state_change_form') {
    NodeSiteAssessmentStateChangeForm::alter($form, $form_state);
  }
  elseif ($form_id == 'node_site_assessment_assign_users_form') {
    NodeSiteAssessmentAssignUsersForm::alter($form, $form_state);
  }
  elseif ($form_id == 'revision_overview_form') {
    // When messing with the revision creation workflow, the position of
    // the default revision is not always the first on the /revisions page.
    // This is a workaround to fix this issue.
    $revisions = $form['node_revisions_table'];
    $current_revision = NULL;
    foreach ($revisions as $key => $revision) {
      if (!is_int($key)) {
        continue;
      }
      if (empty($revision['#attributes']['class'])) {
        continue;
      }
      $classes = $revision['#attributes']['class'];
      if (in_array('revision-current', $classes)) {
        $current_revision = $key;
        break;
      }
    }
    if (!empty($current_revision)) {
      $revision = $form['node_revisions_table'][$current_revision];
      unset($form['node_revisions_table'][$current_revision]);
      array_unshift($form['node_revisions_table'], $revision);
    }
  }
  elseif (in_array($form_id, ['user_form', 'user_register_form'])) {
    $form['account']['roles']['#access'] = \Drupal::currentUser()->hasPermission('administer users');
  }
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function iucn_assessment_node_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  // The revision edit page is actually the node edit page.
  // We need to change the form entity to the selected revision.
  if ($entity->bundle() == 'site_assessment' && $operation == 'edit') {
    $node_revision = \Drupal::routeMatch()->getParameter('node_revision');
    if (!empty($node_revision)) {
      $revision = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadRevision($node_revision);
      if (empty($revision)) {
        throw new NotFoundHttpException();
      }
      $form_state->getFormObject()->setEntity($revision);
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function iucn_assessment_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $entity_type) {
    $constraints = $entity_type->getConstraints();
    unset($constraints['EntityUntranslatableFields']);
    $entity_type->setConstraints($constraints);
  }
  $entity_types['paragraph']->setFormClass('geysir_modal_edit', '\Drupal\iucn_assessment\Form\IucnGeysirModalParagraphForm');
  $entity_types['paragraph']->setFormClass('geysir_modal_add', '\Drupal\iucn_assessment\Form\IucnGeysirModalParagraphAddForm');
}

/**
 * Implements hook_validation_constraint_alter().
 */
function iucn_assessment_validation_constraint_alter(array &$definitions) {
  if (isset($definitions['EntityChanged'])) {
    $definitions['EntityChanged']['class'] = 'Drupal\iucn_assessment\Plugin\Validation\Constraint\IucnAssessmentEntityChangedConstraint';
  }
}

/**
 * Implements hook_entity_type_build().
 */
function iucn_assessment_entity_type_build(array &$entity_types) {
  $entity_types['node']->setFormClass('state_change', 'Drupal\node\NodeForm');
  $entity_types['node']->setFormClass('assign_users', 'Drupal\node\NodeForm');
  $entity_types['node']->setFormClass('assign_users', 'Drupal\node\NodeForm');
}

/**
 * Implements hook_entity_operation().
 */
function iucn_assessment_entity_operation(EntityInterface $entity) {
  $operations = [];
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'site_assessment') {
    // Add the available transitions as entity operations.
    $transitions = \Drupal::entityTypeManager()
      ->getStorage('workflow_config_transition')
      ->loadByProperties(['from_sid' => $entity->field_state->value]);
    /** @var \Drupal\workflow\Entity\WorkflowConfigTransition $transition */
    $current_account = \Drupal::currentUser();
    $current_user = User::load($current_account->id());
    /** @var \Drupal\iucn_assessment\Plugin\AssessmentWorkflow $workflow_service */
    $workflow_service = \Drupal::service('iucn_assessment.workflow');

    foreach ($transitions as $transition) {
      if ($transition->getFromSid() == $transition->getToSid()
        && $transition->getFromSid() != AssessmentWorkflow::STATUS_UNDER_REVIEW) {
        continue;
      }

      /** @var \Drupal\node\NodeInterface $entity */
      if (!$transition->isAllowed($current_user) || !$workflow_service->checkAssessmentAccess($entity, 'change_state')->isAllowed()) {
        continue;
      }
      $label = $transition->label();
      if (empty($label)) {
        $to_state = WorkflowState::load($transition->getToSid());
        $label = $to_state->label();
      }
      $operations[$transition->id()] = [
        'title' => $label,
        'url' => Url::fromRoute('iucn_assessment.node.state_change', ['node' => $entity->id()]),
        'weight' => 20,
      ];
    }

    if (in_array($entity->field_state->value, AssessmentWorkflow::USER_ASSIGNMENT_STATES)
      && NodeSiteAssessmentAssignUsersForm::access($current_account, $entity)->isAllowed()) {
      $operations['assign_users'] = [
        'title' => t('Assign users'),
        'url' => Url::fromRoute('iucn_assessment.node.assign_users', ['node' => $entity->id()]),
        'weight' => 30,
      ];
    }

    // Add correct operations for reviewers.
    if ($entity->field_state->value == AssessmentWorkflow::STATUS_UNDER_REVIEW
      && !empty($reviewer_revision = $workflow_service->getReviewerRevision($entity, $current_account->id()))) {
      /** @var \Drupal\node\NodeInterface $reviewer_revision */
      $operations['edit_reviewer_revision'] = [
        'title' => t('Edit'),
        'url' => Url::fromRoute('node.revision_edit', [
          'node' => $entity->id(),
          'node_revision' => $reviewer_revision->getRevisionId(),
        ]),
        'weight' => 10,
      ];
      $operations['finish_reviewer_revision'] = [
        'title' => t('Finish reviewing'),
        'url' => Url::fromRoute('iucn_assessment.node_revision.state_change', [
          'node' => $entity->id(),
          'node_revision' => $reviewer_revision->getRevisionId(),
        ]),
        'weight' => 10,
      ];
    }
  }
  elseif ($entity->getEntityTypeId() == 'user') {
    $operations['assign'] = [
      'title' => t('Assign'),
      'url' => Url::fromRoute('iucn_assessment.user_assign', ['user' => $entity->id()]),
      'weight' => 0,
    ];
  }
  return $operations;
}

/**
 * Implements hook_entity_operation_alter().
 */
function iucn_assessment_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->bundle() == 'site_assessment') {
    /** @var \Drupal\node\NodeInterface $entity */
    /** @var \Drupal\iucn_assessment\Plugin\AssessmentWorkflow $workflow_service */
    $workflow_service = \Drupal::service('iucn_assessment.workflow');
    // Remove the edit entity operation when it isn't actually allowed.
    if ($workflow_service->checkAssessmentAccess($entity)->isAllowed() === FALSE) {
      unset($operations['edit']);
    }
  }
}
